using Greg.Xrm.Command.Parsing;
using Greg.Xrm.Command.Services;
using System.ComponentModel.DataAnnotations;

namespace Greg.Xrm.Command.Commands.Settings
{
	[Command("settings", "import", HelpText = "(Preview) Imports settings from an Excel or JSON file.")]
	public class ImportCommand : ICanProvideUsageExample
	{
        [Option("file", "f", HelpText = "The file to import the settings from. The file should be in JSON or Excel format.")]
        [Required]
        public string FileName { get; set; } = string.Empty;



        public void WriteUsageExamples(MarkdownWriter writer)
		{
			writer.WriteLine("This command can be used to import settings from an Excel or JSON file.");
			writer.WriteLine("You don't need to specify the format of the file, as it will be automatically detected based on the file contents.");

            writer.WriteTitle3("JSON file");
			writer.WriteParagraph("The structure of the JSON file should be equal to the one generated by `pacx settings export` command, and should be similar to the following example:");
			writer.WriteCodeBlockStart("json");
			writer.WriteLine(@"
[
  {
    ""uniquename"": ""AllowNotificationsEarlyAccess"",
    ""displayname"": ""In-app notifications"",
    ""description"": ""Enables the app to poll for new in-app notifications and display those notifications as a toast or within the notification center."",
    ""datatype"": ""Boolean"",
    ""isoverridable"": true,
    ""overridablelevel"": ""App And Organization"",
    ""isvisible"": true,
    ""releaselevel"": ""GA"",
    ""informationurl"": ""https://docs.microsoft.com/powerapps/developer/model-driven-apps/clientapi/send-in-app-notifications"",
    ""defaultvalue"": ""false"",
    ""environmentvalue"": ""false"",
    ""appvalues"": {
      ""Dataverse Accelerator App"": ""true"",
      ""Package Management View"": ""true"",
      ""My Custom App"": ""true""
    }
  },
  ...
]
");
			writer.WriteCodeBlockEnd();
            writer.WriteLine();
            writer.WriteLine("All properties except `uniquename`, `defaultvalue`, `environmentvalue` and `appvalues` are ignored.");
            writer.WriteLine("The `uniquename` property is used to identify the setting to update.");
            writer.WriteLine("The `defaultvalue` property is the default value for the setting. If provided, it is updated at `settingdefinition` level.");
            writer.WriteLine("The `environmentvalue` property is the value for the setting at environment level. If provided, it is updated at `organizationsetting` level.");
            writer.WriteLine("The `appvalues` property is a dictionary where the key is the app name and the value is the setting value for that app. It should be provided only for settings that can be overridden at app level.");
            writer.WriteLine();
            writer.WriteLine("If you don't provide any of the `defaultvalue`, `environmentvalue`, or `appvalues` properties, or you provide `null` as a value, no update will be performed for that property.");
            writer.WriteLine("To clear a specific value, pass an empty string instead.");
            writer.WriteLine();
            writer.WriteLine("The following are lightweight, valid, sample input JSON files:");

			writer.WriteCodeBlockStart("json");
			writer.WriteLine(@"
[
  {
    ""uniquename"": ""AllowNotificationsEarlyAccess"",
    ""defaultvalue"": ""false"",
    ""environmentvalue"": ""false"",
    ""appvalues"": {
      ""Dataverse Accelerator App"": ""true"",
      ""Package Management View"": ""true"",
      ""My Custom App"": ""true""
    }
  }
]
");
			writer.WriteCodeBlockEnd();
			writer.WriteCodeBlockStart("json");
			writer.WriteLine(@"
[
  {
    ""uniquename"": ""AllowNotificationsEarlyAccess"",
    ""environmentvalue"": ""true""
  }
]
");
			writer.WriteCodeBlockEnd();

			writer.WriteCodeBlockStart("json");
			writer.WriteLine(@"
[
  {
    ""uniquename"": ""AllowNotificationsEarlyAccess"",
    ""appvalues"": {
      ""My Custom App"": ""false""
    }
  }
]
");
			writer.WriteCodeBlockEnd();

            writer.WriteLine();
            writer.WriteLine("As you can see in the above examples, only the `uniquename` attribute is actually mandatory. Then you have to provide at least one of the other 3 properties. The `appvalues` dictionary, if provided, must contain at least one app value.");
            writer.WriteLine();

			writer.WriteTitle3("Excel file");
            writer.WriteParagraph("The Excel file structure should be EXACTLY the one provided by the `pacx settings export` command. We higly recommend to:");
            writer.WriteList(
                "Create a new solution in your Dataverse environment.",
                "Add all the settings you need to update to the solution.",
				"Export the settings to an Excel file using the `pacx settings export` command.",
				"Modify the settings in the Excel file.",
				"Import the settings back using the `pacx settings import` command."
			);
		}
	}
}
