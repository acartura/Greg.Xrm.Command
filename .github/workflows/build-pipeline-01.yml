# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build Pipeline v01

on:
  push:
    branches: [ "master" ]
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  NuGetDirectory: ${{ github.workspace}}/nuget

jobs:
  build:
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Greg.Xrm.Command.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Checkout documentation from wiki
      uses: actions/checkout@v4
      with:
        repository: neronotte/Greg.Xrm.Command.wiki
        token: ${{ secrets.GH_TOKEN }}
        path: ${{ github.workspace }}/wiki

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Restore nuget dependencies
    - name: Restore Dependencies
      run: dotnet restore

    # Set the version number
    - name: Set Version Number
      id: set_version
      run: |
        $year = (Get-Date).ToString("yyyy")
        $month = Get-Date -Format MM
        $version = "1.$year.$month.$env:GITHUB_RUN_NUMBER"
        echo Version=$version
        echo $version > $env:GITHUB_WORKSPACE/version.txt

    # Build backage
    - name: Build
      run: |
        $version = Get-Content $env:GITHUB_WORKSPACE/version.txt
        dotnet build --configuration Release /p:Version=$version
        dotnet pack --configuration Release /p:Version=$version --output ${{ env.NuGetDirectory }}
        
    - name: Update Wiki content
      run: |
        .\Greg.Xrm.Command\bin\Release\net7.0\pacx.exe --export ${{ github.workspace }}/wiki

    - name: Push documentation to wiki
      uses: actions4gh/deploy-wiki@v1
      with:
        token: ${{ secrets.GH_TOKEN }}
        path: ${{ github.workspace }}/wiki
        
    - name: Upload NuGet Package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  deploy:
    needs: build
    runs-on: windows-latest  
      
    steps:
      - name: Download NuGet package
        uses: actions/download-artifact@v2
        with:
          name: package
        
      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "./package" -Recurse -Include *.nupkg)) {
            dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./package/Greg.Xrm.Command.nupkg
          asset_name: Greg.Xrm.Command.nupkg
          asset_content_type: application/zip
